// src/services/userServiceUpdated.ts
import { User } from "../models/User";
import bcrypt from "bcryptjs";
import jwt from "jsonwebtoken";
import nodemailer from "nodemailer";
import { profileService } from "./profileService";

const JWT_SECRET = process.env.JWT_SECRET || "your_jwt_secret";
const REFRESH_TOKEN_SECRET =
  process.env.REFRESH_TOKEN_SECRET || "your_refresh_token_secret";
const ACCESS_TOKEN_EXPIRY = "1h";
const REFRESH_TOKEN_EXPIRY = "7d";

// Helper functions
const generateOTP = (): string => {
  return Math.floor(100000 + Math.random() * 900000).toString();
};

const transporter = nodemailer.createTransport({
  service: "gmail",
  auth: {
    user: process.env.EMAIL_USERNAME,
    pass: process.env.EMAIL_PASSWORD,
  },
});

export const userServiceUpdated = {
  signUp: async (userData: any) => {
    const { fullName, phone, email, password, ...rest } = userData;

    if (!fullName) {
      throw new Error("Thi·∫øu fullName b·∫Øt bu·ªôc");
    }
    if (!phone) {
      throw new Error("Thi·∫øu phone b·∫Øt bu·ªôc");
    }
    if (!email) {
      throw new Error("Thi·∫øu email b·∫Øt bu·ªôc");
    }
    if (!password) {
      throw new Error("Thi·∫øu password b·∫Øt bu·ªôc");
    }

    const existingUser = await User.findOne({
      $or: [{ phone }, { email }],
    });
    if (existingUser) {
      throw new Error("S·ªë ƒëi·ªán tho·∫°i ho·∫∑c email ƒë√£ t·ªìn t·∫°i");
    }

    const hashedPassword = await bcrypt.hash(password, 10);

    // T·∫°o OTP cho email verification
    const otp = generateOTP();
    const expires = new Date(Date.now() + 15 * 60 * 1000); // 15 ph√∫t

    const user = await User.create({
      fullName,
      phone,
      email,
      password: hashedPassword,
      role: "user",
      isActive: false, // Ch∆∞a active cho ƒë·∫øn khi verify email
      otpCode: otp,
      otpExpires: expires,
      ...rest,
    });

    // G·ª≠i email verification
    await transporter.sendMail({
      from: process.env.EMAIL_USERNAME,
      to: email,
      subject: "X√°c th·ª±c t√†i kho·∫£n - Second Hand EV Platform",
      html: `
        <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
          <h2 style="color: #333;">X√°c th·ª±c t√†i kho·∫£n</h2>
          <p>Xin ch√†o ${fullName},</p>
          <p>C·∫£m ∆°n b·∫°n ƒë√£ ƒëƒÉng k√Ω t√†i kho·∫£n t·∫°i Second Hand EV Platform!</p>
          <p>M√£ x√°c th·ª±c c·ªßa b·∫°n l√†: <strong style="font-size: 24px; color: #007bff;">${otp}</strong></p>
          <p>M√£ n√†y c√≥ hi·ªáu l·ª±c trong 15 ph√∫t.</p>
          <p>N·∫øu b·∫°n kh√¥ng th·ª±c hi·ªán ƒëƒÉng k√Ω n√†y, vui l√≤ng b·ªè qua email n√†y.</p>
          <hr style="margin: 20px 0;">
          <p style="color: #666; font-size: 12px;">¬© 2025 Second Hand EV Platform</p>
        </div>
      `,
    });

    // T·∫°o profile r·ªóng cho user m·ªõi
    try {
      await profileService.createEmptyProfile(user._id.toString());
      console.log(`‚úÖ Profile created for user: ${user._id}`);
    } catch (profileError) {
      console.error("‚ùå Error creating profile:", profileError);
      // Kh√¥ng throw error v√¨ user ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng
    }

    // X√≥a password v√† OTP tr∆∞·ªõc khi tr·∫£ v·ªÅ
    const userObj = user.toObject() as any;
    delete userObj.password;
    delete userObj.otpCode;
    delete userObj.otpExpires;

    return {
      user: userObj,
      message:
        "ƒêƒÉng k√Ω th√†nh c√¥ng! Vui l√≤ng ki·ªÉm tra email ƒë·ªÉ x√°c th·ª±c t√†i kho·∫£n.",
    };
  },

  signUpWithPhone: async (userData: any) => {
    const { fullName, phone } = userData;

    if (!fullName) {
      throw new Error("Thi·∫øu fullName b·∫Øt bu·ªôc");
    }
    if (!phone) {
      throw new Error("Thi·∫øu phone b·∫Øt bu·ªôc");
    }

    const existingUser = await User.findOne({ phone });
    if (existingUser) {
      throw new Error("S·ªë ƒëi·ªán tho·∫°i ƒë√£ t·ªìn t·∫°i");
    }

    // T·∫°o OTP cho phone verification
    const otp = generateOTP();
    const expires = new Date(Date.now() + 5 * 60 * 1000); // 5 ph√∫t

    const user = await User.create({
      fullName,
      phone,
      password: "", // Password r·ªóng cho phone auth
      role: "user",
      isActive: false, // Ch∆∞a active cho ƒë·∫øn khi verify phone
      otpCode: otp,
      otpExpires: expires,
    });

    // G·ª≠i SMS OTP (Mock)
    await sendOTPSMS(phone, otp);

    // T·∫°o profile r·ªóng cho user m·ªõi
    try {
      await profileService.createEmptyProfile(user._id.toString());
      console.log(`‚úÖ Profile created for phone user: ${user._id}`);
    } catch (profileError) {
      console.error("‚ùå Error creating profile:", profileError);
      // Kh√¥ng throw error v√¨ user ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng
    }

    // X√≥a password v√† OTP tr∆∞·ªõc khi tr·∫£ v·ªÅ
    const userObj = user.toObject() as any;
    delete userObj.password;
    delete userObj.otpCode;
    delete userObj.otpExpires;

    return {
      user: userObj,
      message:
        "ƒêƒÉng k√Ω th√†nh c√¥ng! Vui l√≤ng ki·ªÉm tra SMS ƒë·ªÉ x√°c th·ª±c t√†i kho·∫£n.",
    };
  },
};

// Mock SMS service
const sendOTPSMS = async (phone: string, otp: string) => {
  try {
    // Format phone number (add +84 for Vietnam)
    const formattedPhone = phone.startsWith("+")
      ? phone
      : `+84${phone.replace(/^0/, "")}`;

    // Mock SMS - ch·ªâ log ra console ƒë·ªÉ test
    console.log(`üì± SMS Mock: G·ª≠i OTP ${otp} ƒë·∫øn ${formattedPhone}`);
    console.log(
      `üì± N·ªôi dung: "M√£ x√°c th·ª±c c·ªßa b·∫°n l√†: ${otp}. M√£ c√≥ hi·ªáu l·ª±c trong 5 ph√∫t."`
    );

    return true;
  } catch (error) {
    console.error("Error sending SMS:", error);
    throw new Error("Kh√¥ng th·ªÉ g·ª≠i SMS. Vui l√≤ng ki·ªÉm tra s·ªë ƒëi·ªán tho·∫°i.");
  }
};
