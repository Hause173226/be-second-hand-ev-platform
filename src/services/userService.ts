import { User } from "../models/User";
import bcrypt from "bcryptjs";
import { log } from "console";
import jwt from "jsonwebtoken";
import nodemailer from "nodemailer";

const JWT_SECRET = process.env.JWT_SECRET || "your_jwt_secret";
const REFRESH_TOKEN_SECRET =
  process.env.REFRESH_TOKEN_SECRET || "your_refresh_token_secret";
const ACCESS_TOKEN_EXPIRY = "1h"; // Changed to 1 hour
const REFRESH_TOKEN_EXPIRY = "7d"; // 7 days

const transporter = nodemailer.createTransport({
  service: "gmail", // Ho·∫∑c d·ªãch v·ª• email kh√°c
  auth: {
    user: process.env.EMAIL_USERNAME,
    pass: process.env.EMAIL_PASSWORD,
  },
});

const sendOTPEmail = async (to: string, otp: string) => {
  try {
    await transporter.sendMail({
      from: process.env.EMAIL_USERNAME, // Ph·∫£i ƒë·ªìng b·ªô v·ªõi user ·ªü tr√™n
      to,
      subject: "M√£ x√°c th·ª±c ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u",
      text: `M√£ OTP c·ªßa b·∫°n l√†: ${otp}`,
    });
  } catch (error) {
    console.error("Error sending email:", error);
  }
};

// Mock SMS service
const sendOTPSMS = async (phone: string, otp: string) => {
  try {
    // Format phone number (add +84 for Vietnam)
    const formattedPhone = phone.startsWith("+")
      ? phone
      : `+84${phone.replace(/^0/, "")}`;

    // Mock SMS - ch·ªâ log ra console ƒë·ªÉ test
    console.log(`üì± SMS Mock: G·ª≠i OTP ${otp} ƒë·∫øn ${formattedPhone}`);
    console.log(
      `üì± N·ªôi dung: "M√£ x√°c th·ª±c c·ªßa b·∫°n l√†: ${otp}. M√£ c√≥ hi·ªáu l·ª±c trong 5 ph√∫t."`
    );

    // Trong production, c√≥ th·ªÉ l∆∞u OTP v√†o database ƒë·ªÉ admin xem
    // await OTPLog.create({ phone: formattedPhone, otp, timestamp: new Date() });

    return true;
  } catch (error) {
    console.error("Error sending SMS:", error);
    throw new Error("Kh√¥ng th·ªÉ g·ª≠i SMS. Vui l√≤ng ki·ªÉm tra s·ªë ƒëi·ªán tho·∫°i.");
  }
};

const generateOTP = (length = 6) => {
  return Math.floor(100000 + Math.random() * 900000)
    .toString()
    .substring(0, length);
};

export const userService = {
  signUp: async (userData: any) => {
    const { fullName, phone, email, password, ...rest } = userData;

    if (!fullName) {
      throw new Error("Thi·∫øu fullName b·∫Øt bu·ªôc");
    }
    if (!phone) {
      throw new Error("Thi·∫øu phone b·∫Øt bu·ªôc");
    }
    if (!email) {
      throw new Error("Thi·∫øu email b·∫Øt bu·ªôc");
    }
    if (!password) {
      throw new Error("Thi·∫øu password b·∫Øt bu·ªôc");
    }

    const existingUser = await User.findOne({
      $or: [{ phone }, { email }],
    });
    if (existingUser) {
      throw new Error("S·ªë ƒëi·ªán tho·∫°i ho·∫∑c email ƒë√£ t·ªìn t·∫°i");
    }

    const hashedPassword = await bcrypt.hash(password, 10);

    // T·∫°o OTP cho email verification
    const otp = generateOTP();
    const expires = new Date(Date.now() + 15 * 60 * 1000); // 15 ph√∫t

    const user = await User.create({
      fullName,
      phone,
      email,
      password: hashedPassword,
      role: "user",
      isActive: false, // Ch∆∞a active cho ƒë·∫øn khi verify email
      otpCode: otp,
      otpExpires: expires,
      ...rest,
    });

    // G·ª≠i email verification
    await transporter.sendMail({
      from: process.env.EMAIL_USERNAME,
      to: email,
      subject: "X√°c th·ª±c t√†i kho·∫£n - Second Hand EV Platform",
      html: `
        <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
          <h2 style="color: #333;">X√°c th·ª±c t√†i kho·∫£n</h2>
          <p>Xin ch√†o ${fullName},</p>
          <p>C·∫£m ∆°n b·∫°n ƒë√£ ƒëƒÉng k√Ω t√†i kho·∫£n t·∫°i Second Hand EV Platform!</p>
          <p>M√£ x√°c th·ª±c c·ªßa b·∫°n l√†: <strong style="font-size: 24px; color: #007bff;">${otp}</strong></p>
          <p>M√£ n√†y c√≥ hi·ªáu l·ª±c trong 15 ph√∫t.</p>
          <p>N·∫øu b·∫°n kh√¥ng th·ª±c hi·ªán ƒëƒÉng k√Ω n√†y, vui l√≤ng b·ªè qua email n√†y.</p>
          <hr style="margin: 20px 0;">
          <p style="color: #666; font-size: 12px;">¬© 2024 Second Hand EV Platform</p>
        </div>
      `,
    });

    // X√≥a password v√† OTP tr∆∞·ªõc khi tr·∫£ v·ªÅ
    const userObj = user.toObject() as any;
    delete userObj.password;
    delete userObj.otpCode;
    delete userObj.otpExpires;

    return {
      user: userObj,
      message:
        "ƒêƒÉng k√Ω th√†nh c√¥ng! Vui l√≤ng ki·ªÉm tra email ƒë·ªÉ x√°c th·ª±c t√†i kho·∫£n.",
    };
  },

  generateTokens: async (user: any) => {
    const accessToken = jwt.sign(
      { userId: user._id, email: user.email, role: user.role },
      JWT_SECRET,
      { expiresIn: ACCESS_TOKEN_EXPIRY }
    );

    const refreshToken = jwt.sign({ userId: user._id }, REFRESH_TOKEN_SECRET, {
      expiresIn: REFRESH_TOKEN_EXPIRY,
    });

    // Store refresh token in database
    user.refreshToken = refreshToken;
    await user.save();

    return { accessToken, refreshToken };
  },

  signIn: async (email: string, password: string, role?: string) => {
    // N·∫øu kh√¥ng truy·ªÅn role th√¨ m·∫∑c ƒë·ªãnh l√† "user"
    const userRole = role || "user";
    const user = await User.findOne({ email, role: userRole });
    if (!user)
      throw new Error("Email, m·∫≠t kh·∫©u ho·∫∑c quy·ªÅn truy c·∫≠p kh√¥ng ƒë√∫ng");

    // Ki·ªÉm tra user c√≥ password kh√¥ng
    if (!user.password) {
      throw new Error("T√†i kho·∫£n n√†y ch∆∞a c√≥ m·∫≠t kh·∫©u");
    }

    const isMatch = await bcrypt.compare(password, user.password);
    if (!isMatch)
      throw new Error("Email, m·∫≠t kh·∫©u ho·∫∑c quy·ªÅn truy c·∫≠p kh√¥ng ƒë√∫ng");

    const { accessToken, refreshToken } = await userService.generateTokens(
      user
    );

    const userObj = user.toObject() as any;
    delete userObj.password;
    delete userObj.refreshToken;

    return {
      user: userObj,
      accessToken,
      refreshToken,
    };
  },

  refreshToken: async (refreshToken: string) => {
    if (!refreshToken) {
      throw new Error("Refresh token is required");
    }

    try {
      // Verify refresh token
      const decoded = jwt.verify(refreshToken, REFRESH_TOKEN_SECRET) as {
        userId: string;
      };

      // Find user with this refresh token
      const user = await User.findOne({
        _id: decoded.userId,
        refreshToken: refreshToken,
      });

      if (!user) {
        throw new Error("Invalid refresh token");
      }

      // Generate new tokens
      const tokens = await userService.generateTokens(user);

      return tokens;
    } catch (error) {
      throw new Error("Invalid refresh token");
    }
  },

  signOut: async (userId: string) => {
    const user = await User.findById(userId);
    if (!user) {
      throw new Error("User not found");
    }

    // Clear refresh token
    user.refreshToken = undefined;
    await user.save();

    return { message: "ƒêƒÉng xu·∫•t th√†nh c√¥ng" };
  },

  sendForgotPasswordOTP: async (email: string) => {
    const user = await User.findOne({ email });
    if (!user) throw new Error("Email kh√¥ng t·ªìn t·∫°i");

    const otp = generateOTP();
    const expires = new Date(Date.now() + 5 * 60 * 1000); // 5 ph√∫t

    user.otpCode = otp;
    user.otpExpires = expires;
    await user.save();

    await sendOTPEmail(email, otp);

    return { message: "OTP ƒë√£ ƒë∆∞·ª£c g·ª≠i v·ªÅ email" };
  },

  resendForgotPasswordOTP: async (email: string) => {
    // G·ª≠i l·∫°i OTP m·ªõi
    return await userService.sendForgotPasswordOTP(email);
  },

  verifyOTPAndResetPassword: async (
    email: string,
    otp: string,
    newPassword: string
  ) => {
    const user = await User.findOne({
      email,
      otpCode: otp,
      otpExpires: { $gt: new Date() },
    });
    if (!user) throw new Error("OTP kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n");

    user.password = await bcrypt.hash(newPassword, 10);
    user.otpCode = undefined;
    user.otpExpires = undefined;
    await user.save();

    return { message: "ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u th√†nh c√¥ng" };
  },

  getAllUsers: async () => {
    const users = await User.find({ isActive: true }).lean();
    return users;
  },

  getUserById: async (userId: string) => {
    const user = await User.findById(userId).lean();
    if (!user) {
      throw new Error("User not found");
    }
    // Remove password before returning
    const userObj = user as any;
    delete userObj.password;
    return userObj;
  },

  updateUser: async (userId: string, updateData: any) => {
    const user = await User.findById(userId);
    if (!user) {
      throw new Error("User not found");
    }

    // NgƒÉn kh√¥ng cho c·∫≠p nh·∫≠t password tr·ª±c ti·∫øp
    if (updateData.password) {
      throw new Error("S·ª≠ d·ª•ng changePassword ƒë·ªÉ ƒë·ªïi m·∫≠t kh·∫©u");
    }

    // NgƒÉn kh√¥ng cho c·∫≠p nh·∫≠t tr·∫°ng th√°i tr·ª±c ti·∫øp
    if (updateData.isActive !== undefined) {
      throw new Error("S·ª≠ d·ª•ng changeUserStatus ƒë·ªÉ thay ƒë·ªïi tr·∫°ng th√°i");
    }

    // Ch·ªâ c·∫≠p nh·∫≠t nh·ªØng field ƒë∆∞·ª£c truy·ªÅn l√™n v√† kh√¥ng ph·∫£i undefined/null
    Object.keys(updateData).forEach((key) => {
      if (
        updateData[key] !== undefined &&
        updateData[key] !== null &&
        key !== "password" &&
        key !== "isActive" &&
        key !== "refreshToken"
      ) {
        (user as any)[key] = updateData[key];
      }
    });

    await user.save();
    const userObj = user.toObject() as any;
    delete userObj.password;
    delete userObj.refreshToken;
    return userObj;
  },

  changePassword: async (
    userId: string,
    currentPassword: string,
    newPassword: string
  ) => {
    const user = await User.findById(userId);
    if (!user) {
      throw new Error("User not found");
    }

    // Ki·ªÉm tra user c√≥ password kh√¥ng
    if (!user.password) {
      throw new Error("T√†i kho·∫£n n√†y ch∆∞a c√≥ m·∫≠t kh·∫©u");
    }

    // Ki·ªÉm tra m·∫≠t kh·∫©u hi·ªán t·∫°i c√≥ ƒë√∫ng kh√¥ng
    const isCurrentPasswordMatch = await bcrypt.compare(
      currentPassword,
      user.password
    );
    if (!isCurrentPasswordMatch) {
      throw new Error("Current password is incorrect");
    }

    // Ki·ªÉm tra m·∫≠t kh·∫©u m·ªõi kh√¥ng tr√πng v·ªõi m·∫≠t kh·∫©u hi·ªán t·∫°i
    const isSamePassword = await bcrypt.compare(newPassword, user.password);
    if (isSamePassword) {
      throw new Error("M·∫≠t kh·∫©u m·ªõi ph·∫£i kh√°c m·∫≠t kh·∫©u hi·ªán t·∫°i");
    }

    // Hash m·∫≠t kh·∫©u m·ªõi v√† l∆∞u
    const hashedPassword = await bcrypt.hash(newPassword, 10);
    user.password = hashedPassword;

    // X√≥a refresh token ƒë·ªÉ bu·ªôc user ƒëƒÉng nh·∫≠p l·∫°i (t√πy ch·ªçn)
    user.refreshToken = undefined;

    await user.save();

    return { message: "ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng" };
  },

  // ===== PHONE AUTHENTICATION METHODS =====

  // ƒêƒÉng k√Ω b·∫±ng s·ªë ƒëi·ªán tho·∫°i
  signUpWithPhone: async (userData: any) => {
    const { fullName, phone, ...rest } = userData;

    if (!fullName) {
      throw new Error("Thi·∫øu fullName b·∫Øt bu·ªôc");
    }
    if (!phone) {
      throw new Error("Thi·∫øu phone b·∫Øt bu·ªôc");
    }

    // Ki·ªÉm tra phone ƒë√£ t·ªìn t·∫°i ch∆∞a
    const existingUser = await User.findOne({ phone });
    if (existingUser) {
      throw new Error("S·ªë ƒëi·ªán tho·∫°i ƒë√£ t·ªìn t·∫°i");
    }

    // T·∫°o OTP cho x√°c th·ª±c
    const otp = generateOTP();
    const expires = new Date(Date.now() + 5 * 60 * 1000); // 5 ph√∫t

    // T·∫°o user v·ªõi tr·∫°ng th√°i ch∆∞a active
    const user = await User.create({
      fullName,
      phone,
      password: "", // Kh√¥ng c·∫ßn password cho phone auth
      role: "user",
      isActive: false, // Ch∆∞a active cho ƒë·∫øn khi verify OTP
      otpCode: otp,
      otpExpires: expires,
      ...rest,
    });

    // G·ª≠i OTP qua SMS
    await sendOTPSMS(phone, otp);

    // X√≥a password v√† OTP tr∆∞·ªõc khi tr·∫£ v·ªÅ
    const userObj = user.toObject() as any;
    delete userObj.password;
    delete userObj.otpCode;
    delete userObj.otpExpires;

    return {
      user: userObj,
      message: "OTP ƒë√£ ƒë∆∞·ª£c g·ª≠i v·ªÅ s·ªë ƒëi·ªán tho·∫°i c·ªßa b·∫°n",
    };
  },

  // X√°c th·ª±c OTP cho ƒëƒÉng k√Ω b·∫±ng phone
  verifyPhoneOTP: async (phone: string, otp: string) => {
    const user = await User.findOne({
      phone,
      otpCode: otp,
      otpExpires: { $gt: new Date() },
    });

    if (!user) {
      throw new Error("OTP kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n");
    }

    // Active user v√† x√≥a OTP
    user.isActive = true;
    user.otpCode = undefined;
    user.otpExpires = undefined;
    await user.save();

    // T·∫°o tokens
    const { accessToken, refreshToken } = await userService.generateTokens(
      user
    );

    const userObj = user.toObject() as any;
    delete userObj.password;
    delete userObj.refreshToken;

    return {
      user: userObj,
      accessToken,
      refreshToken,
      message: "X√°c th·ª±c th√†nh c√¥ng",
    };
  },

  // ƒêƒÉng nh·∫≠p b·∫±ng s·ªë ƒëi·ªán tho·∫°i (g·ª≠i OTP)
  signInWithPhone: async (phone: string) => {
    const user = await User.findOne({ phone, isActive: true });
    if (!user) {
      throw new Error("S·ªë ƒëi·ªán tho·∫°i kh√¥ng t·ªìn t·∫°i ho·∫∑c ch∆∞a ƒë∆∞·ª£c k√≠ch ho·∫°t");
    }

    // T·∫°o OTP m·ªõi
    const otp = generateOTP();
    const expires = new Date(Date.now() + 5 * 60 * 1000); // 5 ph√∫t

    user.otpCode = otp;
    user.otpExpires = expires;
    await user.save();

    // G·ª≠i OTP qua SMS
    await sendOTPSMS(phone, otp);

    return { message: "OTP ƒë√£ ƒë∆∞·ª£c g·ª≠i v·ªÅ s·ªë ƒëi·ªán tho·∫°i c·ªßa b·∫°n" };
  },

  // X√°c th·ª±c OTP cho ƒëƒÉng nh·∫≠p b·∫±ng phone
  verifySignInOTP: async (phone: string, otp: string) => {
    const user = await User.findOne({
      phone,
      otpCode: otp,
      otpExpires: { $gt: new Date() },
      isActive: true,
    });

    if (!user) {
      throw new Error("OTP kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n");
    }

    // X√≥a OTP
    user.otpCode = undefined;
    user.otpExpires = undefined;
    await user.save();

    // T·∫°o tokens
    const { accessToken, refreshToken } = await userService.generateTokens(
      user
    );

    const userObj = user.toObject() as any;
    delete userObj.password;
    delete userObj.refreshToken;

    return {
      user: userObj,
      accessToken,
      refreshToken,
      message: "ƒêƒÉng nh·∫≠p th√†nh c√¥ng",
    };
  },

  // G·ª≠i l·∫°i OTP cho phone
  resendPhoneOTP: async (phone: string) => {
    const user = await User.findOne({ phone });
    if (!user) {
      throw new Error("S·ªë ƒëi·ªán tho·∫°i kh√¥ng t·ªìn t·∫°i");
    }

    const otp = generateOTP();
    const expires = new Date(Date.now() + 5 * 60 * 1000); // 5 ph√∫t

    user.otpCode = otp;
    user.otpExpires = expires;
    await user.save();

    await sendOTPSMS(phone, otp);

    return { message: "OTP m·ªõi ƒë√£ ƒë∆∞·ª£c g·ª≠i v·ªÅ s·ªë ƒëi·ªán tho·∫°i c·ªßa b·∫°n" };
  },

  // ===== EMAIL VERIFICATION FOR SIGNUP =====

  // G·ª≠i email verification sau khi ƒëƒÉng k√Ω
  sendEmailVerification: async (email: string) => {
    const user = await User.findOne({ email });
    if (!user) {
      throw new Error("Email kh√¥ng t·ªìn t·∫°i");
    }

    if (user.isActive) {
      throw new Error("T√†i kho·∫£n ƒë√£ ƒë∆∞·ª£c k√≠ch ho·∫°t");
    }

    const otp = generateOTP();
    const expires = new Date(Date.now() + 15 * 60 * 1000); // 15 ph√∫t

    user.otpCode = otp;
    user.otpExpires = expires;
    await user.save();

    // G·ª≠i email verification
    await transporter.sendMail({
      from: process.env.EMAIL_USERNAME,
      to: email,
      subject: "X√°c th·ª±c t√†i kho·∫£n - Second Hand EV Platform",
      html: `
        <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
          <h2 style="color: #333;">X√°c th·ª±c t√†i kho·∫£n</h2>
          <p>Xin ch√†o ${user.fullName},</p>
          <p>C·∫£m ∆°n b·∫°n ƒë√£ ƒëƒÉng k√Ω t√†i kho·∫£n t·∫°i Second Hand EV Platform!</p>
          <p>M√£ x√°c th·ª±c c·ªßa b·∫°n l√†: <strong style="font-size: 24px; color: #007bff;">${otp}</strong></p>
          <p>M√£ n√†y c√≥ hi·ªáu l·ª±c trong 15 ph√∫t.</p>
          <p>N·∫øu b·∫°n kh√¥ng th·ª±c hi·ªán ƒëƒÉng k√Ω n√†y, vui l√≤ng b·ªè qua email n√†y.</p>
          <hr style="margin: 20px 0;">
          <p style="color: #666; font-size: 12px;">¬© 2025 Second Hand EV Platform</p>
        </div>
      `,
    });

    return { message: "Email x√°c th·ª±c ƒë√£ ƒë∆∞·ª£c g·ª≠i" };
  },

  // X√°c th·ª±c email
  verifyEmail: async (email: string, otp: string) => {
    const user = await User.findOne({
      email,
      otpCode: otp,
      otpExpires: { $gt: new Date() },
    });

    if (!user) {
      throw new Error("OTP kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n");
    }

    // Active user v√† x√≥a OTP
    user.isActive = true;
    user.otpCode = undefined;
    user.otpExpires = undefined;
    await user.save();

    // T·∫°o tokens
    const { accessToken, refreshToken } = await userService.generateTokens(
      user
    );

    const userObj = user.toObject() as any;
    delete userObj.password;
    delete userObj.refreshToken;

    return {
      user: userObj,
      accessToken,
      refreshToken,
      message: "Email ƒë√£ ƒë∆∞·ª£c x√°c th·ª±c th√†nh c√¥ng",
    };
  },
};
